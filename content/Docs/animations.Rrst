Animations
==========

:date: 2019-04-09
:modified: 2019-10-08

.. {r setup, echo=FALSE}
source("../../set_knitr_opts.R")
set_opts_chunk("demos-zzz") # Linked to external sites
library("piecepackr")
.. ..

.. include:: ../../links.rst

.. {r save_rdata, echo=FALSE}
RData_files <- list.files("../tmp", pattern="RData", full.names=TRUE)
ee <- new.env()
for (ff in RData_files) { 
    load(ff, envir=ee) 
}
save(list=names(ee), file="../share/demo_cfgs.RData", envir=ee)
.. ..

.. contents::

Directly using the 'animations' package
---------------------------------------

.. note:: Besides the ``animation`` package there are also several other R packages that can be used to help make an animation like the gifski_ and tweenr_ packages.  

Here we'll give a simple example using the `animation package`_ and piecepackr_'s API to build an animation showing a preview of each of the piecepack `configurations`_ stored on this website.  

.. {r animation, results='hide', message=FALSE}
library("animation")
library("grid")
library("piecepackr")
cfgs <- new.env()
load("../share/demo_cfgs.RData", envir=cfgs)
draw_demos <- function(cfgs) {
    for (nn in sort(names(cfgs))) {
        grid.newpage()
        text <- sprintf("grid.piece('preview_layout', cfg=%s)", nn)
        grid.text(text, y=0.94, gp=gpar(fontsize=16, fontface="bold"))
        pushViewport(viewport(y=6/14, height=inch(6), width=inch(6)))
        grid.piece("preview_layout", cfg=cfgs[[nn]])
        popViewport()
    }
}
saveGIF({draw_demos(cfgs)}, movie.name="pnp-previews.gif",
    ani.height=540, ani.width=480, ani.res=80, ani.dev="png", ani.type="png")

.. {r move, echo=FALSE}
invisible(file.rename('pnp-previews.gif', '../images/knitr/pnp-previews.gif'))
.. ..

.. image:: {static}/images/knitr/pnp-previews.gif
    :alt: Animation of previews of various piecepacks
    :align: center

And here is a simple animation of a tic-tac-toe game:

.. {r tic-tac-toe, results='hide', message=FALSE}
draw_tictactoe_game_step <- function(n, cfg=list()) {
    grid.newpage()
    pushViewport(viewport(width=inch(4), height=inch(4)))
    if (n > 0) grid.piece("tile_back", cfg=cfg)
    if (n > 1) grid.piece("coin_back", suit=1, cfg=cfg, x=inch(2),y=inch(2))
    if (n > 2) grid.piece("coin_back", suit=2, cfg=cfg, x=inch(1),y=inch(2), angle=180)
    if (n > 3) grid.piece("coin_back", suit=1, cfg=cfg, x=inch(3),y=inch(1))
    if (n > 4) grid.piece("coin_back", suit=2, cfg=cfg, x=inch(1),y=inch(3), angle=180)
    if (n > 5) grid.piece("coin_back", suit=1, cfg=cfg, x=inch(1),y=inch(1))
    if (n > 6) grid.piece("coin_back", suit=2, cfg=cfg, x=inch(3),y=inch(3), angle=180)
    if (n > 7) grid.piece("coin_back", suit=1, cfg=cfg, x=inch(2),y=inch(1))
    if (n > 8) grid.segments(x0=inch(0.5), y0=inch(1), x1=inch(3.5), y1=inch(1), 
                             gp=gpar(col="blue", lwd=4))
    popViewport()
}
draw_tictactoe_game <- function(cfg=list()) {
    for (ii in 0:9) { draw_tictactoe_game_step(ii, cfg) }
}
saveGIF({draw_tictactoe_game(cfgs$dual1)}, movie.name="tictactoe.gif", 
    ani.height=480, ani.width=480, ani.res=120, ani.dev="png", ani.type="png")
.. ..
.. {r move2, echo=FALSE}
invisible(file.rename('tictactoe.gif', '../images/knitr/tictactoe.gif'))
.. ..

.. image:: {static}/images/knitr/tictactoe.gif
    :alt: Animation of a tic-tac-toe game
    :align: center

Using ppgames' 'animate_game' function
--------------------------------------

ppgames_ has a convenience function ``animate_game`` that can be used to animate games recorded in `Portable Piecepack Notation`_:

.. {r fuji-san, results='hide', message=FALSE}
library("ppgames", warn.conflicts=FALSE)
dark_colorscheme <- list(suit_color="darkred,black,darkgreen,darkblue,black",
                      invert_colors.suited=TRUE, border_color="black", border_lex=2)
piecepack_suits <- list(suit_text="\U0001f31e,\U0001f31c,\U0001f451,\u269c,\uaa5c", # ðŸŒž,ðŸŒœ,ðŸ‘‘,âšœ,ê©œ
                    suit_fontfamily="Noto Emoji,Noto Sans Symbols2,Noto Emoji,Noto Sans Symbols,Noto Sans Cham",
                    suit_cex="0.6,0.7,0.75,0.9,0.9")
traditional_ranks <- list(use_suit_as_ace=TRUE, rank_text=",a,2,3,4,5")
cfg3d <- list(width.pawn=0.75, height.pawn=0.75, depth.pawn=0.375, 
                   dm_text.pawn="", shape.pawn="convex6", invert_colors.pawn=TRUE,
                   edge_color.coin="tan", edge_color.tile="tan")
cfg <- pp_cfg(c(piecepack_suits, dark_colorscheme, traditional_ranks, cfg3d))

puzzle2 <- matrix(c(4,4,4,5,2,0,2,4,0,3,1,1,
                    1,2,5,3,3,5,3,2,5,1,0,0), nrow=2, byrow=TRUE)
s2 <- solve_fujisan(coins=puzzle2)
game <- read_ppn(textConnection(s2$ppn))[[1]]
animate_game(game, op_scale=1, op_angle=90, trans=op_transform, cfg=cfg, file="fujisan.gif")
.. ..

.. {r move3, echo=FALSE}
invisible(file.rename('fujisan.gif', '../images/knitr/fujisan.gif'))

.. ..

.. image:: {static}/images/knitr/fujisan.gif
    :alt: Animation of a Fuji-san game
    :align: center

.. {r game_animation, echo=FALSE}
examples <- list(Backgammon = "../images/knitr/games-backgammon-starting-diagram-1.svg",
                 `Cell Management` = "../share/rules/cell_management.png",
                 Checkers = "../share/rules/american_checkers.png",
                 Chess = "../images/knitr/demos-chess-international-chess-1.svg",
                 Cribbage = "../images/knitr/games-cribbage-starting-diagram-1.svg",
                 Everest = "../images/knitr/games-everest-starting-diagram-1.svg",
                 `Four Field Kono` = "../share/rules/four_field_kono.png",
                 `Fuji-san` = "../share/rules/fujisan.png",
                 `Ice Floe` = "../share/rules/ice_floe.png",
                 `San Andreas` = "../share/rules/san_andreas.png",
                 Tablut = "../images/knitr/games-tablut-starting-diagram-1.svg",
                 `The "In" Crowd` = "../share/rules/the_in_crowd.png",
                 Xiangqi = "../images/knitr/demos-chess-xiangqi-1.svg",
                 Wormholes = "../share/rules/wormholes.png")

draw_example_games <- function() {
    for (i in seq_along(examples)) {
        grid.newpage()
        pushViewport(viewport(width=inch(4), height=inch(5)))
        pushViewport(viewport(width=inch(4), height=inch(1), y=inch(4.5)))
        grid.text(names(examples)[i])
        popViewport()
        pushViewport(viewport(width=inch(4), height=inch(4), y=inch(2)))
        grid.draw(file2grob(examples[[i]], distort=FALSE))
        popViewport()
    }
}
animation::saveGIF({draw_example_games()}, movie.name="piecepack_games.gif",
        ani.height=600, ani.width=480, ani.res=120, ani.dev="png", ani.type="png")
invisible(file.rename('piecepack_games.gif', '../images/knitr/piecepack_games.gif'))
.. ..
