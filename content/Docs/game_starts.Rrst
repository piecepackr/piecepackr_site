Game starting arrangement functions
===================================

:date: 2019-10-25
:modified: 2020-01-26

The package ppgames_ contains functions that generate the starting piece arrangements for several `piecepack games`_.  These functions return data frames that can be used directly with ``piecepackr::pmap_piece`` or ``ppgames::cat_piece`` to generate `piecepack game`_ diagrams_ or they can be used with ppgames_' `Portable Piecepack Notation`_ parser ``read_ppn`` to initially setup the game pieces.

.. {r setup, echo=FALSE}
source("../../set_knitr_opts.R")
set_opts_chunk("docs-game-starts")
.. ..

.. include:: ../../links.rst

.. contents::

Directly generating starting diagrams
-------------------------------------

The game start functions all return a data frame that can be used directly with ``piecepackr::pmap_piece`` or ``ppgames::cat_piece``:

.. code:: r

    library("ppgames")
    cat_piece(df_fide_chess())

.. image:: https://trevorldavis.com/share/piecepack/unicode_piecepack_alt_5.png
    :alt: Unicode text diagram for Chess
    :align: center

.. code:: r 

    download.file("https://trevorldavis.com/piecepackr/share/demo_cfgs.RData")
    cfgs <- new.env()
    load("demo_cfgs.RData", envir=cfgs)
    pmap_piece(df_fide_chess(), cfg=cfgs$chess5, op_scale=0.5, 
               trans=op_transform, default.units="in")

.. image:: {static}/share/rules/fide-chess.png
    :alt: 3D diagram for Chess
    :align: center

Use with Portable Piecepack Notation
------------------------------------

The game start functions can also be used with `Portable Piecepack Notation`_ to initially set the game pieces via the metadata field ``GameType``::

    GameType: Four Field Kono

    1. b1:b3 1... d3:b3 2. c1:c3 2... a3:c3 3. c2-c1 3... b4:b2 4. a1-b1 4... b3:b1
    5. d1:b1 5... c3-c2 6. a2-a3 6... b2:d2 7. a3-b3 7... c4-c3 8. c1-d1 8... d4-d3
    9. b1-b2 9... d2:b2 10. b3-a3 10... b2-b1 {Player 1's loss is assured with the
     separation of their two remaining pieces and they should resign in a real game}
    11. a3-a2 11... b1-c1 12. d1-d2 12... c1-d1 13. a2-a3 13... a4-b4
    14. a3-a4 14... b4-c4 15. a4-b4 15... c4-d4 16. b4-a4 16... d4:d2 {Player 2 wins}

.. image:: https://www.trevorldavis.com/share/piecepack/four_field_kono_example.gif
    :alt: Four Field Kono example

It is also possible to pass in arguments to the game start function by passing a "mapping" to the ``GameType`` field::

    ---
    GameType:
      Name: Fujisan
      Coins: "44452n24n3aa/a25335325ann"
    ...
    1. a1-b1 2. n2-k2 3. b1-e1 4. e1-j1 5. j1-j2 6. j2-l2 7. k2-m2
    8. m2-m1 9. l2-l1 10. n1-k1 11. m1-i1 12. i1-d1 13. d1-d2 14. l1-i1
    15. i1-i2 16. k1-k2 17. k2-e2 18. i2-c2 19. a2-f2 20. e2-h2 21. h2-g2
    22. c2-h2 23. h2-h1 24. d2-h2 25. f2-b2 26. b2-b1 27. b1-g1

.. image:: {static}/images/knitr/fujisan.gif
    :alt: Animation of a Fuji-san game
    :align: center

Table of Supported Game Start Functions
---------------------------------------

.. list-table:: Game Start Functions
    :header-rows: 1
    :widths: 30, 20, 10, 40

    * - game
      - df_names
      - ruleset
      - comment 
    * - `Alice Chess <https://en.wikipedia.org/wiki/Alice_chess>`_
      - df_alice_chess
      - X
      -
    * - `Alien City <http://www.ludism.org/ppwiki/AlienCity>`_
      - df_alien_city
      -
      -
    * - `Backgammon <http://www.ludism.org/ppwiki/Backgammon>`_
      - df_backgammon
      - X
      -
    * - `Cell Management <http://www.ludism.org/ppwiki/CellManagement>`_
      - df_cell_management
      -
      - Not very PPN friendly
    * - `Chaturaji <http://www.ludism.org/ppwiki/Chaturaji>`_
      - df_chaturaji
      -
      -
    * - `(American) Checkers <http://www.ludism.org/ppwiki/Checkers>`_
      - df_american_checkers, df_english_draughts, df_checkers
      - X
      -
    * - `(International) Chess <http://www.ludism.org/ppwiki/Checkers>`_
      - df_international_chess, df_chess
      - X
      -
    * - `Cribbage (Board) <http://www.ludism.org/ppwiki/Cribbage>`_
      - df_cribbage_board
      - X
      - Just a (piecepack) cribbage board (no cards)
    * - `Desfases <http://www.ludism.org/ppwiki/Desfases>`_
      - df_desfases
      -
      -
    * - `Everest <http://www.ludism.org/ppwiki/Everest>`_
      - df_everest
      -
      -
    * - `Four Field Kono <http://www.ludism.org/ppwiki/FourFieldKono>`_
      - df_four_field_kono
      - X
      - 
    * - `Four Seasons Chess <https://www.chessvariants.com/historic.dir/4seiz.html>`_
      - df_four_seasons_chess
      - X
      -
    * - `Fujisan <http://www.ludism.org/ppwiki/Fuji-san>`_
      - df_fujisan
      -
      -
    * - `Ice Floe <http://www.ludism.org/ppwiki/IceFloe>`_
      - df_ice_floe
      -
      -
    * - `Ley Lines <http://www.ludism.org/ppwiki/LeyLines>`_
      - df_ley_lines
      -
      -
    * - `Nine Men's Morris <https://en.wikipedia.org/wiki/Nine_men%27s_morris>`_
      - df_nine_mens_morris
      - X
      - 
    * - `Plans of Action <http://www.ludism.org/ppwiki/PlansOfAction>`_
      - df_plans_of_action
      - 
      -
    * - Rect Board Tiles
      - df_rect_board_tiles
      -
      - Makes a rectangular board made from tiles
    * - `Relativity <http://www.ludism.org/ppwiki/Relativity>`_
      - df_relativity
      -
      -
    * - `Salta <https://en.wikipedia.org/wiki/Salta_(game)>`_
      - df_salta
      -
      -
    * - `San Andreas <http://www.ludism.org/ppwiki/SanAndreas>`_
      - df_san_andreas
      -
      -
    * - `Shogi (Japanese Chess) <http://www.ludism.org/ppwiki/Shogi>`_
      - df_shogi
      -
      -
    * - `Tablut <http://www.ludism.org/ppwiki/Tablut>`_
      - df_tablut
      - X
      -
    * - `The "In" Crowd <http://www.ludism.org/ppwiki/TheInCrowd>`_
      - df_the_in_crowd
      -
      -
    * - `Triactor <http://www.ludism.org/ppwiki/Triactor>`_
      - df_triactor
      -
      -
    * - `Twelve Men's Morris <https://en.wikipedia.org/wiki/Morabaraba>`_
      - df_twelve_mens_morris
      - X
      - 
    * - `Ultima <https://en.wikipedia.org/wiki/Baroque_chess>`_
      - df_ultima, df_baroque_chess
      - X
      -
    * - `Xiangqi (Chinese Chess) <http://www.ludism.org/ppwiki/Xiangqi>`_
      - df_xiangqi
      - X
      -
    * - `Wormholes <http://www.ludism.org/ppwiki/Wormholes>`_
      - df_wormholes
      -
      -

.. figure:: {static}/images/knitr/piecepack_games.gif
    :alt: Some games supported in ppgames
    :align: center

    Some games supported in ppgames

.. {r various-images, echo=FALSE}
library("piecepackr")
library("ppgames", warn.conflicts=FALSE)
cfgs <- game_systems("dejavu")

dark_colorscheme <- list(suit_color="darkred,black,darkgreen,darkblue,black",
                      invert_colors.suited=TRUE, border_color="black", border_lex=2)
piecepack_suits <- list(suit_text="\U0001f31e,\U0001f31c,\U0001f451,\u269c,\uaa5c", # ðŸŒž,ðŸŒœ,ðŸ‘‘,âšœ,ê©œ
                    suit_fontfamily="Noto Emoji,Noto Sans Symbols2,Noto Emoji,Noto Sans Symbols,Noto Sans Cham",
                    suit_cex="0.6,0.7,0.75,0.9,0.9")
traditional_ranks <- list(use_suit_as_ace=TRUE, rank_text=",a,2,3,4,5")
cfg3d <- list(width.pawn=0.75, height.pawn=0.75, depth.pawn=0.375, 
                   dm_text.pawn="", shape.pawn="convex6", invert_colors.pawn=TRUE,
                   edge_color.coin="tan", edge_color.tile="tan")
traditional <- pp_cfg(c(piecepack_suits, dark_colorscheme, traditional_ranks, cfg3d))

two_player <- pp_cfg(list(suit_text="ðŸŒž,ðŸŒœ,ðŸ‘‘,âšœ,ê©œ",
         suit_cex="0.6,0.7,0.75,0.9,0.9",
        suit_fontfamily="Noto Emoji,Noto Sans Symbols2,Noto Emoji,Noto Sans Symbols,Noto Sans Cham",
        suit_color="#D55E00,#000000,#F0E442,#0072B2,#009E73",
        background_color="#000000,#D55E00,#0072B2,#F0E442,white",
        border_color.tile_back="#009E73", border_lex.tile_back=5
))
gk_2p <- game_kit(list(cfg=two_player))

small_tiles <- as.list(cfgs$piecepack)
small_tiles$width.tile = 1.75
small_tiles <- pp_cfg(small_tiles)

png("../share/rules/american_checkers.png", width=9, height=9, units="in", res=72)
pmap_piece(df_american_checkers(), cfg=two_player, default.units="in")
invisible(dev.off())
save_ruleset("american-checkers", gk_2p, "../share/rules/american_checkers.pdf")
save_ruleset("american-checkers", gk_2p, "../share/rules/american_checkers_A4.pdf", size="A4")
save_pamphlet("american-checkers", gk_2p, "../share/rules/american_checkers_pamphlet.pdf")
save_pamphlet("american-checkers", gk_2p, "../share/rules/american_checkers_pamphlet_A4.pdf", size="A4")

png("../share/rules/cell_management.png", width=11.5, height=12.5, units="in", res=36)
pmap_piece(df_cell_management(seed=42), envir=cfgs, default.units="in", 
           op_scale=0.5, op_angle=60, trans=op_transform)
invisible(dev.off())

png("../share/rules/desfases.png", width=14, height=14, units="in", res=36)
pmap_piece(df_desfases(seed=42), cfg=small_tiles, default.units="in", 
           op_scale=0.5, op_angle=45, trans=op_transform)
invisible(dev.off())

png("../share/rules/four_field_kono.png", width=5, height=5, units="in", res=72)
pmap_piece(df_four_field_kono(), cfg=two_player, default.units="in")
invisible(dev.off())

png("../share/rules/fujisan.png", width=15, height=5, units="in", res=36)
pmap_piece(df_fujisan(seed=42), cfg=traditional, default.units="in", 
           op_scale=1.0, op_angle=90, trans=op_transform)
invisible(dev.off())

png("../share/rules/ice_floe.png", width=11, height=11, units="in", res=36)
pmap_piece(df_ice_floe(), envir=cfgs, default.units="in", 
           op_scale=1.0, op_angle=45, trans=op_transform)
invisible(dev.off())

png("../share/rules/ley_lines.png", width=14, height=16, units="in", res=36)
pmap_piece(df_ley_lines(), envir=cfgs, default.units="in", 
           op_scale=1.0, op_angle=90, trans=op_transform)
invisible(dev.off())

png("../share/rules/relativity.png", width=7, height=5, units="in", res=72)
pmap_piece(df_relativity(seed=12), envir=cfgs, default.units="in", 
           op_scale=0.5, op_angle=45, trans=op_transform)
invisible(dev.off())

png("../share/rules/plans_of_action.png", width=9, height=9, units="in", res=72)
pmap_piece(df_plans_of_action(seed=32), envir=cfgs, default.units="in", 
           op_scale=0.5, op_angle=45, trans=op_transform)
invisible(dev.off())

png("../share/rules/san_andreas.png", width=11, height=17, units="in", res=36)
pmap_piece(df_san_andreas(), envir=cfgs, default.units="in", 
           op_scale=1.0, trans=op_transform)
invisible(dev.off())

png("../share/rules/the_in_crowd.png", width=7.5, height=7.5, units="in", res=42)
pmap_piece(df_the_in_crowd(), envir=cfgs, default.units="in", 
           op_scale=1.0, trans=op_transform)
invisible(dev.off())

png("../share/rules/wormholes.png", width=11, height=19, units="in", res=42)
pmap_piece(df_wormholes(), envir=cfgs, default.units="in", 
           op_scale=0.5, trans=op_transform)
invisible(dev.off())
.. ..

.. {r game_animation, echo=FALSE, results='hide', message=FALSE}
library("animation")
library("grid")
examples <- list(Backgammon = "../images/knitr/games-backgammon-starting-diagram-1.svg",
                 `Cell Management` = "../share/rules/cell_management.png",
                 Chaturaji = "../images/knitr/demos-chess-chaturaji-1.svg",
                 Checkers = "../share/rules/american_checkers.png",
                 Chess = "../images/knitr/demos-chess-international-chess-1.svg",
                 Cribbage = "../images/knitr/games-cribbage-starting-diagram-1.svg",
                 Desfases = "../share/rules/desfases.png",
                 Everest = "../images/knitr/games-everest-starting-diagram-1.svg",
                 `Four Field Kono` = "../share/rules/four_field_kono.png",
                 `Fuji-san` = "../share/rules/fujisan.png",
                 `Ice Floe` = "../share/rules/ice_floe.png",
                 `Ley Lines` = "../share/rules/ley_lines.png",
                 `Plans of Action` = "../share/rules/plans_of_action.png",
                 `Relativity` = "../share/rules/relativity.png",
                 `San Andreas` = "../share/rules/san_andreas.png",
                 Tablut = "../images/knitr/games-tablut-starting-diagram-1.svg",
                 `The "In" Crowd` = "../share/rules/the_in_crowd.png",
                 Xiangqi = "../images/knitr/demos-chess-xiangqi-1.svg",
                 Wormholes = "../share/rules/wormholes.png")

draw_example_games <- function() {
    for (i in seq_along(examples)) {
        grid.newpage()
        pushViewport(viewport(width=inch(4), height=inch(5)))
        pushViewport(viewport(width=inch(4), height=inch(1), y=inch(4.5)))
        grid.text(names(examples)[i])
        popViewport()
        pushViewport(viewport(width=inch(4), height=inch(4), y=inch(2)))
        grid.draw(file2grob(examples[[i]], distort=FALSE))
        popViewport()
    }
}
saveGIF({draw_example_games()}, movie.name="piecepack_games.gif",
        ani.height=600, ani.width=480, ani.res=120, ani.dev="png", ani.type="png")
invisible(file.rename('piecepack_games.gif', '../images/knitr/piecepack_games.gif'))
.. ..
