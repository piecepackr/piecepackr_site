Custom grob functions
=====================

:date: 2019-04-23
:modified: 2019-04-28
:tags: docs

.. {r setup, echo=FALSE}
source("../../set_knitr_opts.R")
set_opts_chunk("docs-custom_grob_fn")
.. ..

.. include:: ../../links.rst

.. contents::

Intro
-----

Although using piecepackr_'s `configuration lists`_ provide a powerful high-level way to alter the appearance of your piecepack_ graphics piecepackr_ also allows one to modify the appearance of your piecepack graphics even more with the use of custom grob functions.  

Examples
--------

Checkered Tile Backs
~~~~~~~~~~~~~~~~~~~~

The default grob function doesn't support adding checkers to the back of your piecepack tiles but piecepackr_ does include a utility function ``checkersGrob`` that can be used via a custom grob function:

.. warning:: Some people (including the inventor James "Kyle" Droscha) feel that `adding checkers to the back of one's piecepack is a bad idea <http://www.ludism.org/ppwiki/DesignFAQ>`_, in particular they leak information about the direction of the tile face.

.. {r checker_back, fig.cap='Custom grob function to use checkers on the tile back'}
library("grid")
library("piecepackr")

checkeredPieceGrob <- function(piece_side, suit, rank, cfg) {
    cfg <- as_pp_cfg(cfg)
    opt <- cfg$get_piece_opt(piece_side, suit, rank)
    shape_fn <- get_shape_grob_fn(opt$shape, opt$shape_t, opt$shape_r)
    background_grob <- shape_fn(gp=gpar(col=NA, fill=opt$background_col))
    checkers_grob <- checkersGrob(opt$gridline_col, opt$shape, opt$shape_t)
    border_grob <- shape_fn(gp=gpar(col=opt$border_col, fill=NA))
    gl <- gList(background_grob, checkers_grob, border_grob)
    gTree(children=gl, name=piece_side)
}
cfg <- list(grob_fn.tile_back=checkeredPieceGrob)
grid.piece("preview_layout", cfg=cfg)
.. ..

The above custom grob function was written fairly generally so it can also support ``convex#`` polygons (i.e. "Hexpack" tiles):

.. {r hexpack_checker_back, fig.cap="'add_checkers' even works on hexagon shaped tiles"}
cfg <- list(grob_fn.tile_back=checkeredPieceGrob, shape.tile="convex6", shape.coin="convex3", shape.saucer="convex3")
grid.piece("preview_layout", cfg=cfg)
.. .. 

Pawn Belts with Three Suit Symbols
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The pawn belts in Jonathan Dietrich's `JCD piecepack`_ and Chris Sakkas' `Nine-Suit Piecepack <http://fossilbank.wikidot.com/local--files/entry:piecepack/NINEPIECEPACK.svg>`_ both feature three suit symbols but it is difficult to replicate such a belt with piecepackr_'s default draw function since it only supports one primary symbol and one directional mark [*]_.

.. {r three_suited_belt, fig.cap="Pawn belts with three suit symbols", fig.width=3, fig.height=1, out.width=NULL}
pawnBeltGrob <- function(piece_side, suit, rank, cfg) {
    cfg <- as_pp_cfg(cfg)
    opt <- cfg$get_piece_opt(piece_side, suit, rank)
    shape_fn <- get_shape_grob_fn(opt$shape, opt$shape_t, opt$shape_r)
    background_grob <- shape_fn(gp=gpar(col=NA, fill=opt$background_col))
    center_grob <- rectGrob(width=0.3, gp=gpar(col=NA, fill=opt$ps_col))
    gp_ps1 <- gpar(col=opt$background_col, fontsize=opt$ps_fontsize, 
                  fontfamily=opt$ps_fontfamily, fontface=opt$ps_fontface)
    ps_grob1 <- textGrob(opt$ps_text, x=opt$ps_x, y=opt$ps_y, gp=gp_ps1)
    gp_ps2 <- gpar(col=opt$ps_col, fontsize=opt$ps_fontsize, 
                  fontfamily=opt$ps_fontfamily, fontface=opt$ps_fontface)
    ps_grob2 <- textGrob(opt$ps_text, x=c(0.2, 0.8), gp=gp_ps2) 
    border_grob <- shape_fn(gp=gpar(col=opt$border_col, fill=NA))
    gl <- gList(background_grob, center_grob, ps_grob1, ps_grob2, border_grob)

    gTree(children=gl, name=piece_side)
}
cfg <- list(grob_fn.belt=pawnBeltGrob)
grid.piece("belt_face", s=3, cfg=cfg)
.. ..

.. [*] Technically if awkwardly you could replicate it by customizing the ``mat`` on the belt and putting two suit symbols separated by a bunch of whitespace as the directional mark symbols but the amount of whitespace needed would vary with the font and the fontsize so not a general solution and would require trial and error.

Low-level utilities
-------------------

piecepackr_ comes with several utility functions that can aid in the writing of custom grob functions.  For more documentation you can use the ``help`` function:

.. code:: r

    help("grob_fn_helpers")
    help("pp_utils")

For help in writing your own custom grob functions it can also be instructive to look at the code of the default grob function ``basicPieceGrob``:

.. {r default_fn}
    print(basicPieceGrob)
.. ..

In order to draw custom grob functions it may also be helpful to learn more about grid_'s API. Some may also find the grImport2_ package useful.
